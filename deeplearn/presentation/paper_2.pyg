  SEQ_LENGTH = 256
  E_DIM = 128
  STATE_DIM = 512
  N_LAYERS = 4

  def inference():
      model_input = tf.placeholder('uint8', shape=[None, SEQ_LENGTH])
      _ = tf.one_hot(Globals.model_input, depth=E_DIM, axis=-1)
      _ = tf.reshape(_, [-1, SEQ_LENGTH, E_DIM])
      encode = multi_layer_rnn(N_LAYERS, STATE_DIM)
      encoded_input, state = tf.nn.dynamic_rnn(encode,
                                               _,
                                               dtype=tf.float32)
      Globals.encoder_output = state
      with tf.variable_scope('decoder'):
          training_decoder_input = tf.zeros_like(Globals.model_input)
          _ = tf.one_hot(training_decoder_input, depth=E_DIM, axis=-1)
          _ = tf.reshape(_, [-1, SEQ_LENGTH, E_DIM])
          decode = multi_layer_rnn(N_LAYERS, STATE_DIM)
          decoded_output, state = tf.nn.dynamic_rnn(decode, _,
                                                    dtype=tf.float32,
                                                    initial_state=state)
          decoded_output = tf.reshape(decoded_output, [-1, STATE_DIM])
          output = project(decoded_output, E_DIM)
          out = tf.cast(tf.argmax(output, 1), tf.uint8)
          out = tf.reshape(out, [-1, SEQ_LENGTH])
          Globals.training_decoder_input = training_decoder_input
          Globals.model_output = output
          Globals.prediction = out
          Globals.decoder = decode
          Globals.decoder_input = _
